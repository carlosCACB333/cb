// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostService_Create_FullMethodName = "/post.PostService/Create"
	PostService_Read_FullMethodName   = "/post.PostService/Read"
	PostService_Update_FullMethodName = "/post.PostService/Update"
	PostService_Delete_FullMethodName = "/post.PostService/Delete"
	PostService_List_FullMethodName   = "/post.PostService/List"
	PostService_AddTag_FullMethodName = "/post.PostService/AddTag"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostRes, error)
	Read(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRes, error)
	Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostRes, error)
	Delete(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRes, error)
	List(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (PostService_ListClient, error)
	AddTag(ctx context.Context, opts ...grpc.CallOption) (PostService_AddTagClient, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) Create(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostRes, error) {
	out := new(PostRes)
	err := c.cc.Invoke(ctx, PostService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Read(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRes, error) {
	out := new(PostRes)
	err := c.cc.Invoke(ctx, PostService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Update(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostRes, error) {
	out := new(PostRes)
	err := c.cc.Invoke(ctx, PostService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Delete(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (*PostRes, error) {
	out := new(PostRes)
	err := c.cc.Invoke(ctx, PostService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) List(ctx context.Context, in *PostReq, opts ...grpc.CallOption) (PostService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostService_ServiceDesc.Streams[0], PostService_List_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &postServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PostService_ListClient interface {
	Recv() (*PostRes, error)
	grpc.ClientStream
}

type postServiceListClient struct {
	grpc.ClientStream
}

func (x *postServiceListClient) Recv() (*PostRes, error) {
	m := new(PostRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *postServiceClient) AddTag(ctx context.Context, opts ...grpc.CallOption) (PostService_AddTagClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostService_ServiceDesc.Streams[1], PostService_AddTag_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &postServiceAddTagClient{stream}
	return x, nil
}

type PostService_AddTagClient interface {
	Send(*AddTagReq) error
	CloseAndRecv() (*AddTagRes, error)
	grpc.ClientStream
}

type postServiceAddTagClient struct {
	grpc.ClientStream
}

func (x *postServiceAddTagClient) Send(m *AddTagReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *postServiceAddTagClient) CloseAndRecv() (*AddTagRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddTagRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	Create(context.Context, *Post) (*PostRes, error)
	Read(context.Context, *PostReq) (*PostRes, error)
	Update(context.Context, *Post) (*PostRes, error)
	Delete(context.Context, *PostReq) (*PostRes, error)
	List(*PostReq, PostService_ListServer) error
	AddTag(PostService_AddTagServer) error
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) Create(context.Context, *Post) (*PostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostServiceServer) Read(context.Context, *PostReq) (*PostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPostServiceServer) Update(context.Context, *Post) (*PostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostServiceServer) Delete(context.Context, *PostReq) (*PostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostServiceServer) List(*PostReq, PostService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPostServiceServer) AddTag(PostService_AddTagServer) error {
	return status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Create(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Read(ctx, req.(*PostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Update(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Delete(ctx, req.(*PostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PostServiceServer).List(m, &postServiceListServer{stream})
}

type PostService_ListServer interface {
	Send(*PostRes) error
	grpc.ServerStream
}

type postServiceListServer struct {
	grpc.ServerStream
}

func (x *postServiceListServer) Send(m *PostRes) error {
	return x.ServerStream.SendMsg(m)
}

func _PostService_AddTag_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostServiceServer).AddTag(&postServiceAddTagServer{stream})
}

type PostService_AddTagServer interface {
	SendAndClose(*AddTagRes) error
	Recv() (*AddTagReq, error)
	grpc.ServerStream
}

type postServiceAddTagServer struct {
	grpc.ServerStream
}

func (x *postServiceAddTagServer) SendAndClose(m *AddTagRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *postServiceAddTagServer) Recv() (*AddTagReq, error) {
	m := new(AddTagReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _PostService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PostService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PostService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _PostService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddTag",
			Handler:       _PostService_AddTag_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/post.proto",
}
